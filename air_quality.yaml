esphome:
  name: air_quality

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: "<WI-FI_SSID>"
  password: "<WI-FI_PASSWORD>"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Air Quality Fallback Hotspot"
    password: "ycgZIpImlNvV"

captive_portal:

i2c:
  sda: 18
  scl: 19
  scan: true
  id: bus_a

globals:

  - id: esphome_sensitivity
    type: float
    initial_value: '36.5'
    restore_value: yes

  - id: esphome_volume
    type: int

  - id: sound_level
    type: int[5]
    initial_value: '{0, 20, 40, 60, 80}'


sensor:  
  - platform: scd4x
    update_interval: 5s
    co2:
      name: "scd4x CO2"
    temperature:
      name: "scd4x Temperature"
    humidity:
      name: "scd4x Humidity"

  - platform: bh1750
    name: "BH1750 Illuminance"
    address: 0x23
    update_interval: 5s
    
  - platform: sht3xd
    temperature:
      name: "sht3xd Temperature"
    humidity:
      name: "sht3xd Humidity"
    update_interval: 5s
    
# Example configuration entry
  - platform: adc
    pin: 0
    id: esphome_db
    device_class: signal_strength
    name: "Db SoundEsp"
    icon: "mdi:volume-vibrate"
    unit_of_measurement: "db"
    update_interval: 2s
    raw: true
    filters:
      - lambda: |-
          unsigned int sample;
          unsigned long startMillis= millis(); 
          float peakToPeak = 0; 
          unsigned int signalMax = 0;
          unsigned int signalMin = 1024;
          while (millis() - startMillis < 500) {
            sample = analogRead(0);
            if (sample < 1024){
                if (sample > signalMax){
                    signalMax = sample;
                }
                else if (sample < signalMin){
                    signalMin = sample;
                }
              }
          }
          peakToPeak = map((signalMax - signalMin),1,1024,1.5,1024);
          id(esphome_volume) = peakToPeak;
          float state = id(esphome_sensitivity)*log10(peakToPeak)+15;  
          return(state);


  - platform: template
    name: "Volume SoundEsp"
    icon: "mdi:volume-high"
    unit_of_measurement: "%"
    update_interval: 2s
    lambda: return(map((id(esphome_db).state),15,150,0,100));

  - platform: template
    name: "RAW SoundEsp"
    icon: "mdi:volume-source"
    unit_of_measurement: "%"
    update_interval: 2s
    lambda: return(map(id(esphome_volume),1,1024,0,100));

  - platform: template
    name: "Sound quality level"
    update_interval: 10s
    lambda: !lambda |-
      unsigned int currentOutputLevel = 0 ;
      unsigned int lb = endPointInput[ currentOutputLevel ] ;
      unsigned int ub = endPointInput[ currentOutputLevel + 1 ] ;
      if ( id(esphome_db).state < lb || id(esphome_db).state > ub ) {
        unsigned int i;
        for ( i = 0 ; i < 5 ; i++ ) {
          if ( id(esphome_db).state >= id(sound_level)[i] && id(esphome_db).state <= id(sound_level)[i+1] ) break ;
        }
      currentOutputLevel = i ;
      }
      return currentOutputLevel + 1 ;

number:
  - platform: template
    id: sensitivity_slider
    name: "Sensitivity SoundEsp"
    icon: "mdi:knob"
    update_interval: 5s
    initial_value: "36.5"
    step: 0.1
    min_value: 20
    max_value: 40
    mode: slider
    set_action:
      then:
         lambda:  id(esphome_sensitivity) = x;
